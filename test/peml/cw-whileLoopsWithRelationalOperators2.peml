exercise_id: https://codeworkout.cs.vt.edu/gym/exercises/918/practice?workout_id=1402

title: CodeWorkout While Loops with Relational Operators 2
external_id: CS1114_Week4SyntaxDrill_2
is_public: true
experience: 50
language_list: Java

license.id: cc-sa-4.0
license.owner.email: edwards@cs.vt.edu
license.owner.name: Stephen H. Edwards

tags.topics: CS1114, Jeroo, loop, java, relational
tags.style: code writing

instructions:----------
For this question, we will be working with a subclass of Jeroo called CountingJeroo that tracks the number of hops it has peformed.
You can get the number of hops performed so far by calling the `getHopCount()` method.
Below is a while loop with using a Jeroo named `imani`.
Currently, this loop will cause the jeroo to hop and toss a flower 10 times.
We want to change to change the condition for this loop so that the jeroo stops if it has hopped 10 times OR it is out of flowers.
----------

[systems]
language: Java

[assets.code.wrapper.files]
content:----------
import student.micro.jeroo.Jeroo;
import student.micro.jeroo.RelativeDirection;
import static student.micro.jeroo.RelativeDirection.*;
import java.util.ArrayList;

public class syntax2 {

    public static class CountingJeroo extends Jeroo {
        public int hopCount;
        public int flowerCount;

        public CountingJeroo(int flowers) {

            this.hopCount = 0;
            flowerCount = flowers;
        }


        public int getFlowerCount() {
            return flowerCount;
        }

        @Override
        public boolean hasFlower() {
            return flowerCount !=0;
        }

        public int getHopCount() {
            return hopCount;
        }

        @Override
        public void toss() {
            flowerCount--;
        }

        @Override
        public void hop() {
            hopCount++;
        }

        @Override
        public void hop(int numHops) {
            hopCount= hopCount + numHops;
        }


    }// end testJeroo


    public static class Runner {

        ___
    }// end runner

}
----------

[assets.code.starter.files]
content:----------
public void question2(CountingJeroo imani)
{
    while(imani.getHopCount() < 10)
    {
        imani.hop();
        imani.toss();
    }
}
----------


[assets.test.files]
format: java/junit
content:----------
import codeworkout.CodeWorkoutTest;
import codeworkout.Description;
import codeworkout.Hint;
import java.util.Random;
public class syntax2Test extends CodeWorkoutTest  {

    @Description("Checks jeroo stops after 10 hops if it has 10 flowers")
    @Hint("You don't need to change the condition that's already there, just add a new one!")
    public void test1() {
        syntax2.CountingJeroo testJ = new syntax2.CountingJeroo(10);
        int expectedHops = 10;
        syntax2.Runner run = new syntax2.Runner();

        run.question2(testJ);

        assertEquals("Jeroo should hop "+expectedHops+" times.  "
            + "Hopped: "+testJ.getHopCount()+" times", expectedHops, testJ.getHopCount());
    }

    @Description("Checks jeroo stops after less than 5 hops if it has less than 5 flowers")
    @Hint("You don't need to change the condition that's already there, just add a new one!")
    public void test2() {
        Random r = new Random();
        int flowers = r.nextInt(4)+1;
        syntax2.CountingJeroo testJ = new syntax2.CountingJeroo(flowers);
        int expectedHops = flowers;
        syntax2.Runner run = new syntax2.Runner();

        run.question2(testJ);

        assertEquals("Jeroo should hop " + expectedHops + " times.  "
            + "Hopped: "+testJ.getHopCount()+" times", expectedHops, testJ.getHopCount());

        assertEquals("Jeroo should have gotten rid of all of its flowers but has: "
            + testJ.getFlowerCount(), 0, testJ.getFlowerCount());
    }
}
----------