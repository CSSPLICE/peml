exercise_id: https://codeworkout.cs.vt.edu/gym/exercises/583/practice?workout_id=759

title: flipCoin
external_id: ITSC1213_flip_coin
is_public: true
experience: 10
language_list: Java

license.id: cc-sa-4.0
license.owner.email: lcao2@uncc.edu
license.owner.name: lcao2

tags.topics: array, loop
tags.style: coding problem

instructions:----------
This method simulates flipping a fair coin. It takes an integer parameter,
which specifies the number of times that the coin is to be flipped. The method
records the result of each flip and returns the results as a String. For example,
if the argument is 10, the method may return “HHTHTTTHHT”
----------

[systems]
language: Java

[assets.code.wrapper.files]
content:----------
import java.util.Random;
public class RandomProblem
{
   ___
}
----------

[assets.code.starter.files]
content:----------
public String flipCoin(int n)
{
   ___
}
----------


[assets.test.files]
format: java/junit
content:----------
import static org.junit.Assert.*;
import org.junit.*;
import codeworkout.*;
public class RandomProblemTest extends CodeWorkoutTest{

    private RandomProblem rp;
  
    @Before
    public void setUp() {
      rp = new RandomProblem();
    }

    public boolean onlyHT(String s) {
      for (int i = 0; i < s.length(); i++) {
          char a = s.charAt(i);
          if (a != 'H' && a != 'T')
            {
              return false;
            }
      }
      return true;
    }

    @Test
    @Description("test 1000 flips")
    public void testOutputLength()
    {
        int n = 1000;
        String result = rp.flipCoin(n);
        assertEquals("After" + n + " coin flips, result was wrong length.", n, result.length());
        assertTrue("Result should only contain H and T.", onlyHT(result));
    }
  
    @Test
    @Description("test 200 flips")
    public void testOutputLength1()
    {
        int n = 200;
        String result = rp.flipCoin(n);
        assertEquals("After" + n + " coin flips, result was wrong length.", n, result.length());
        assertTrue("Result should only contain H and T.", onlyHT(result));
    }

    @Test
    @Description("test 1500 flips")
    public void testOutputLength1()
    {
        int n = 1500;
        String result = rp.flipCoin(n);
        assertEquals("After" + n + " coin flips, result was wrong length.", n, result.length());
        assertTrue("Result should only contain H and T.", onlyHT(result));
    }

    @Test
    @Hidden
    @Description("test 999 flips")
    public void testOutputLength1() {
        int n = 999;
        String result = rp.flipCoin(n);
        assertEquals("After " + n + " coin flips, result was wrong length.", n, result.length());
        assertTrue("Result should only contain H and T.", onlyHT(result));
  }
}
----------

