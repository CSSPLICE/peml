exercise_id: https://codeworkout.cs.vt.edu/gym/exercises/263/practice?workout_id=46

title: Recursion Programming Exercise: Largest
external_id: RecC-Largest
is_public: true
experience: 10
language_list: Java

license.id: cc-sa-4.0
license.owner.email: sallyhamouda@gmail.com
license.owner.name: sallyhamouda

tags.topics: recursion
tags.style: code writing

instructions:----------
Write the missing base case for function `largest`. Function
`largest` should find the largest number in array
`numbers`. When `largest` is first called, `index` will
equal `numbers.length-1`.

Notice that the index variable is incremented every time the\nrecursive
call is executed. The base case should be executed\non the last element of
the array. The index for this element\nis one less than the length of the
array. \n
----------

[systems]
language: Java

[assets.code.wrapper.files]
content:----------
public class  RecCLargest
{
    ___
}
----------

[assets.code.starter.files]
content:----------
public int largest(int[] numbers, int index) {
    if <<Missing base case>>
      return numbers[0];
    return Math.max(numbers[index], largest(numbers, index-1));
}
----------


[assets.test.files]
format: text/csv-unquoted
pattern_actual: subject.largest({{nums}}, {{index}})
content:----------
nums,index,expected,description
"new int [] {2, 4, 8}",2,8,example
"new int [] {7, 7, 7}",2,7
"new int [] {5}",0,5
"new int [] {10, 4, 8}",2,10
"new int [] {6, 23, 5}",2,23,hidden
----------

