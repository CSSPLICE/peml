# NP-completeness proof template.
# This version is simplified so that it works with standard DAG
# grading.

exercise_id: https://github.com/CSSPLICE/peml-feasibility-examples/blob/main/parsons/pb-nptemplate.peml

title: NP-completeness proof template
author: Cliff Shaffer
license.id: MIT
license.owner.name: Cliff Shaffer
license.owner.email: shaffer@vt.edu

tags.topics: PEML NP-completeness
tags.style: parsons, order

instructions:----------
Show the general process for an NP-Completeness Proof.
----------

[assets.code.blocks.content]
blockid: starter
display: To prove that a problem X is NP-complete do this:
depends:

blockid: xinNP
display: 1. Show that X is in NP.
depends: starter

blockid: algorithm
display: Create an algorithm to solve X (that might or might not use non-determinism) that runs in polynomial time.
depends: xinNP

blockid: starthard
display: 2. Show that X is NP-hard.
depends: algorithm

blockid: choose
display: Choose a known NP-hard problem A.
depends: starthard

blockid: trans
display: Define two transformations.
depends: choose

blockid: t1
display: Describe a polynomial-time algorithm that takes an arbitrary instance <b>I</b> of A to an instance <b>I′</b> of X.
depends: trans

blockid: d1
display: Describe a polynomial-time algorithm that takes an arbitrary instance <b>I</b> of X to an instance <b>I′</b> of A.
depends: -1

blockid: t2
display: Describe a polynomial-time transformation from the solution for <b>I’</b> in problem X (call it <b>SLN’</b>) to <b>SLN</b> such that <b>SLN</b> is the solution for <b>I</b> in problem A.
depends: trans

blockid: d2
display: Describe a polynomial-time transformation from the solution for <b>I’</b> in problem A (call it <b>SLN’</b>) to <b>SLN</b> such that <b>SLN</b> is the solution for <b>I</b> in problem X.
depends: -1
[]
